#!/usr/bin/env python
__info__="""
    A script to facilitate installing my dot files.  The documentation
    states that the symlink function in the OS module is supported on
    all platforms.  Any original files on the system are archived in the
    parent directory of this script.  

    NOTE FOR WINDOWS:   To use this for MSys, you must use the native
                        Python version 3.2 or later from Python.org and
                        be running Vista or later.  Using the CygWin
                        Python will allow for use under CygWin only due
                        to the nature of the symbolic links.

    Keith Prussing 2013-10-26
"""
version="0.1.1"

__DEBUG__ = True


if __name__ == "__main__":
    # Perform the imports
    import argparse, datetime, logging, os, shutil, sys, tarfile

    parser = argparse.ArgumentParser( \
            description=__info__, \
            formatter_class=argparse.RawDescriptionHelpFormatter \
        )
    parser.add_argument( \
            "-v", "--verbose", action="store_true" \
        )
    args = parser.parse_args()

    if __DEBUG__:
        logging.basicConfig(format="%(message)s", level=logging.DEBUG)
    elif args.verbose:
        logging.basicConfig(format="%(message)s", level=logging.INFO)
    else:
        logging.basicConfig(format="%(message)s")
    # end if

    # Get the full path to this file
    filepath = os.path.split( os.path.realpath(__file__) )

    # Get the root directory of the dot files.
    dotdir =  os.path.abspath(filepath[0])
    logging.debug("Target directory: {0}".format(dotdir))

    # Define the files which to exclude from linking.
    excludes = [ \
            "Xresources", "README.markdown", "minttyrc", filepath[1] \
        ]

    # Prepare a backup file.
    time = datetime.datetime.now().strftime("%Y%m%dT%H%M%S")
    tarname = "backup_" +time +".tar.gz"
    logging.debug("Backup file: {0}".format(tarname))
    with tarfile.open(tarname, "w:gz") as tar:

        # And install all of the files in the dot files directory.
        for f in os.listdir(dotdir):
            # Skip ignored files, backup directory, and this installation
            # file.
            if f[0] == "." or f in excludes:
                logging.debug("Skipping {0}".format(f))
                continue
            # end if
            logging.info("Processing: {0}".format(f))

            # Prepare the file names
            oldfile = os.path.join(os.environ["HOME"], "."+f)
            newfile = os.path.join(dotdir, f)

            # If the file already exists, back it up if it is not a
            # link and remove the original.  Otherwise, simply remove
            # the link.
            if os.path.exists(oldfile):
                if not os.path.islink(oldfile):
                    logging.info("    Archiving {0}".format(oldfile))
                    tar.add(newfile)
                    if os.path.isdir(oldfile):
                        shutil.rmtree(oldfile)
                    else:
                        os.remove(oldfile)
                    # end if
                else:
                    logging.info("    Unlinking {0}".format(oldfile))
                    os.unlink(oldfile)
                # end if
            # end if

            # Create the link for the new file.
            try:
                if sys.version_info.major < 3:
                    os.symlink(newfile, oldfile)
                elif sys.version_info.minor > 2 or os.name == "nt":
                    os.symlink(newfile, oldfile, os.path.isdir(newfile))
                else:
                    os.symlink(newfile, oldfile)
                # end if
            except Exception as err:
                logging.error("An error occurred! {0}".format(err))
                msg = "I bet you are using the wrong combination" \
                    +" of Python and Windows."
                logging.error(msg)
                sys.exit(1)
            # end try

        # end for
    # end with
# end if

