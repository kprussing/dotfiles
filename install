#!/usr/bin/env python3
__info__="""
A script to facilitate installing my dot files.  This parses the
provided configuration file and installs all of the specified files in
the given location.  If a file (not symlink) is found in the target
location, it is archived next to the configuration file.  The symlink
function in the os module is portable across platforms; however, to use
this install script on Windows for MSys, you need to use the native
Python and not CygWin.  This is due to the differences between how
symlinks are handled on the two platforms.

"""

import argparse
import configparser
import datetime
import logging
import os
import shutil
import sys
import tarfile

if sys.version_info < (3,3):
    raise RuntimeError("This requires Python 3.3 or newer")

class TarBall(object):
    """Context wrapper to conditionally handle backups."""

    def __init__(self, backup):
        super(TarBall, self).__init__()
        self.backup = backup
        time = datetime.datetime.now().strftime("%Y%m%dT%H%M%S")
        self.tarname = "backup_" +time +".tar.gz"

    def __enter__(self, *args, **kwargs):
        logger = logging.getLogger(__name__ + ".TarBall.__enter__")
        logger.debug("Backup file: {0}".format(self.tarname))
        if self.backup:
            logger.debug("Opening the tar ball")
            self.tar = tarfile.open(self.tarname, "w:gz")


    def __exit__(self, *args, **kwargs):
        logger = logging.getLogger(__name__ + ".TarBall.__exit__")
        logger.debug("Cleaning up tar ball")
        if self.backup:
            self.tar.close()

    def add(self, data):
        if self.backup:
            self.tar.add(data)


default = os.path.join(os.path.dirname(__file__), "install.ini")

if __name__ == "__main__":

    parser = argparse.ArgumentParser(description=__info__)
    parser.add_argument(
            "-n", "--dry-run", dest="dry_run", action="store_true",
            help="Do not actually perform the install."
        )
    parser.add_argument(
            "-f", "--file", default=default, 
            help="Path to install configuration",
            type=argparse.FileType("r", encoding="UTF-8")
        )

    group = parser.add_mutually_exclusive_group()
    group.add_argument(
            "-v", "--verbose", action="store_true",
            help="Increase verbosity of program"
        )
    group.add_argument(
            "-d", "--debug", action="store_true",
            help="Enable debugging statements"
        )

    args = parser.parse_args()

    if args.debug:
        level = logging.DEBUG
    elif args.verbose or args.dry_run:
        level = logging.INFO
    else:
        level = logging.WARNING

    logging.basicConfig(level=level)
    logger = logging.getLogger(__name__)
    logger.debug("Configuration file: {0}".format(args.file.name))
    config = configparser.ConfigParser()
    config.read_dict(
            {"general" : {
                    "create" : True, 
                    "homevar" : ["HOME", "USERPROFILE"],
                    "homepath" : "",
                },
            "link" : {
                },
            }
        )
    config.read_file(args.file)

    # Find the installation directory.
    homedir = config["general"]["homepath"]
    if homedir == "":
        variables = config["general"]["homevar"].split()
        for var in [x.strip() for x in variables]:
            logger.debug("Checking environment for {0}".format(var))
            if var in os.environ:
                homedir = os.environ[var]
                break

    if not os.path.exists(homedir):
        logger.error("No installation directory found! Please set")
        logger.error("'homepath' or 'homevar' to a valid location")
        logger.error("in the configuration file.")
        sys.exit(1)

    dotdir = os.path.dirname(os.path.realpath(args.file.name))
    logger.info("Installing into {0} from {1}".format(homedir, dotdir))
    with TarBall(config["general"]["backup"]) as tar:
        for key, val in config["link"].items():
            src = os.path.join(dotdir, key)
            if not os.path.exists(src):
                logger.warning("{0} is missing!  Skipping.".format(src))
                continue

            if val == "":
                tgt = "." + key
            else:
                tgt = val

            tgt = os.path.join(homedir, tgt)
            if os.path.exists(tgt):
                if not os.path.islink(tgt):
                    logger.info("Archiving {0}".format(tgt))
                    if not args.dry_run:
                        tar.add(tgt)
                        if os.path.isdir(tgt):
                            shutil.rmtree(tgt)
                        else:
                            os.remove(tgt)

                else:
                    logger.info("Unlinking {0}".format(tgt))
                    if not args.dry_run:
                        os.unlink(tgt)

            logger.info("Installing {0} as {1}".format(src, tgt))
            if not args.dry_run:
                root = os.path.dirname(tgt)
                if not os.path.exists(root):
                    logger.info("Making path {0}".format(root))
                    os.makedirs(root)

                # Third argument (target_is_directory) is new in 3.3
                os.symlink(src, tgt, os.path.isdir(src))

